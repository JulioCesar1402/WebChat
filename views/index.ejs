<!DOCTYPE html>
<html>
  <head>
    <title>Chat</title>
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
    </style>
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <ul id="users"></ul>
    <!-- ..source: https://github.com/tryber/sd-011-live-lectures/blob/lecture/30.3/views/board.ejs -->
    <ul id="messages">
      <!-- <.% allMessages.forEach(({timestamp, nickname, message}) => { %>
        <li data-testid="message" ><.%= timestamp %> - <.%= nickname %> : <.%= message %></li>
        <.% }) %> -->
    </ul>
    <form id="form-username" action="">
      <input
        id="input-username"
        autocomplete="off"
        placeholder="nickname"
        data-testid="nickname-box"
      />
      <button
        data-testid="nickname-button"
      >
        Send
      </button>
    </form>
    <form id="form" action="">
      <input
        id="input"
        autocomplete="off"
        placeholder="chatMessage"
        data-testid="message-box"
      />
      <button
        data-testid="send-button"
      >
        Send
      </button>
    </form>
    <script>
      const socket = io();

      

      const messageList = document.getElementById('messages');

      const insertIntoMessageList = (messages) => {
        messages.forEach(({timestamp, nickname, message}) => {
          const msg = document.createElement('li');
          msg.textContent = `${timestamp} - ${nickname}: ${message}`;
          msg.setAttribute('data-testid', 'message');
          messageList.appendChild(msg);
          window.scrollTo(0, document.body.scrollHeight);
        })
      }

      const listAllMessages = () => {
        socket.on('messageHistory', (allMessages) => {
          messageList.innerHTML = '';
          insertIntoMessageList(allMessages);
        });
      }

      listAllMessages();

      // const userList = document.getElementById('users');

      const insertIntoUserList = (users) => {
        users.forEach(({nickname}) => {
          const userName = document.createElement('li');
          userName.textContent = nickname;
          userName.setAttribute('data-testid', 'online-user');
          // userName.setAttribute('class', 'online-user');
          const userList = document.getElementById('users');
          userList.appendChild(userName);
          window.scrollTo(0, document.body.scrollHeight);
        })
      }

      const listAllUsersOnline = () => {
        socket.on('getAllUsers', (allUsers) => {
          const userId = socket.id;
          const userList = document.getElementById('users');
          userList.innerHTML = '';
          const infoUser = allUsers.filter(({id}) => id === userId);
          const infoWithoutUser = allUsers.filter(({id}) => id !== userId);
          insertIntoUserList(infoUser);
          insertIntoUserList(infoWithoutUser);
        });
      }

      listAllUsersOnline();

      const formUsername = document.getElementById('form-username');
      const inputUsername = document.getElementById('input-username');

      let nickname = randomName;

      formUsername.addEventListener('submit', (e) => {
        e.preventDefault();
        if (inputUsername.value) {
          nickname = inputUsername.value;
          // const usersItems = document.getElementsByClassName('online-user');
          const userId = socket.id;
          socket.emit('changeUserName', { id: userId, nickname });
          inputUsername.value = '';
          listAllUsersOnline();
        }
      });

      // ..source: https://www.geeksforgeeks.org/how-to-detect-browser-or-tab-closing-in-javascript/
      window.addEventListener('beforeunload', (e) => {
          e.preventDefault();
          const userId = socket.id;
          socket.emit('onCloseChat', userId);
          e.returnValue = '';
          listAllUsersOnline();
      });

      const form = document.getElementById('form');
      const input = document.getElementById('input');

      form.addEventListener('submit', (e) => {
        e.preventDefault();
        if (input.value) {
          const chatMessage = input.value;
          socket.emit('message', { nickname, chatMessage });
          input.value = '';
        }
      });

      // ..source: https://stackoverflow.com/questions/18648500/add-id-class-to-objects-from-createelement-method
      const messagesHistory = [];

      socket.on('message', (msg) =>  {
        const messages = document.getElementById('messages');
        const item = document.createElement('li');
        item.textContent = msg;
        messagesHistory.push(msg)
        item.setAttribute('data-testid', 'message');
        sessionStorage.setItem('messages', messagesHistory);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

    </script>
  </body>
</html>